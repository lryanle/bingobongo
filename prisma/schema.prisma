generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("MONGODB_URI") // uses connection pooling
}

// ====================================================

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  rooms         Room[]
  created       DateTime  @default(now())

  @@map("users")
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// ====================================================

model Room {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  roomName      String
  roomPassword  String?
  bingoSeed     String
  gameMode      String
  boardSize     Int
  teams         Json     // For complex structures like arrays of objects
  ownerId       String   @unique @map("owner_id") @db.ObjectId
  owner         User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  lastUpdated   DateTime @map("last_updated")

  @@map("rooms")
}


// ====================================================

model ChatRoom {
  id        String       @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id         String      @id @default(cuid()) @map("_id")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  text       String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String
}

